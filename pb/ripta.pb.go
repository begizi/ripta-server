// Code generated by protoc-gen-go.
// source: ripta.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	ripta.proto

It has these top-level messages:
	Stop
	Geocode
	GeocodeRequest
	GeocodeResponse
	ListStopsRequest
	StopLocationRequest
	StopsResponse
	RouteStopTime
	RouteStop
	RouteStopRequest
	RouteStopsResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Stop struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Stop) Reset()                    { *m = Stop{} }
func (m *Stop) String() string            { return proto.CompactTextString(m) }
func (*Stop) ProtoMessage()               {}
func (*Stop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Stop) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Stop) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Stop) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Geocode struct {
	Address string  `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Lat     float64 `protobuf:"fixed64,2,opt,name=lat" json:"lat,omitempty"`
	Long    float64 `protobuf:"fixed64,3,opt,name=long" json:"long,omitempty"`
}

func (m *Geocode) Reset()                    { *m = Geocode{} }
func (m *Geocode) String() string            { return proto.CompactTextString(m) }
func (*Geocode) ProtoMessage()               {}
func (*Geocode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Geocode) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Geocode) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Geocode) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

type GeocodeRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *GeocodeRequest) Reset()                    { *m = GeocodeRequest{} }
func (m *GeocodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GeocodeRequest) ProtoMessage()               {}
func (*GeocodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GeocodeRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type GeocodeResponse struct {
	Geocodes []*Geocode `protobuf:"bytes,1,rep,name=geocodes" json:"geocodes,omitempty"`
}

func (m *GeocodeResponse) Reset()                    { *m = GeocodeResponse{} }
func (m *GeocodeResponse) String() string            { return proto.CompactTextString(m) }
func (*GeocodeResponse) ProtoMessage()               {}
func (*GeocodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GeocodeResponse) GetGeocodes() []*Geocode {
	if m != nil {
		return m.Geocodes
	}
	return nil
}

type ListStopsRequest struct {
}

func (m *ListStopsRequest) Reset()                    { *m = ListStopsRequest{} }
func (m *ListStopsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListStopsRequest) ProtoMessage()               {}
func (*ListStopsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StopLocationRequest struct {
	Route     string  `protobuf:"bytes,1,opt,name=route" json:"route,omitempty"`
	Lat       float64 `protobuf:"fixed64,2,opt,name=lat" json:"lat,omitempty"`
	Long      float64 `protobuf:"fixed64,3,opt,name=long" json:"long,omitempty"`
	Direction string  `protobuf:"bytes,4,opt,name=direction" json:"direction,omitempty"`
}

func (m *StopLocationRequest) Reset()                    { *m = StopLocationRequest{} }
func (m *StopLocationRequest) String() string            { return proto.CompactTextString(m) }
func (*StopLocationRequest) ProtoMessage()               {}
func (*StopLocationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StopLocationRequest) GetRoute() string {
	if m != nil {
		return m.Route
	}
	return ""
}

func (m *StopLocationRequest) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *StopLocationRequest) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

func (m *StopLocationRequest) GetDirection() string {
	if m != nil {
		return m.Direction
	}
	return ""
}

type StopsResponse struct {
	Stop []*Stop `protobuf:"bytes,1,rep,name=stop" json:"stop,omitempty"`
}

func (m *StopsResponse) Reset()                    { *m = StopsResponse{} }
func (m *StopsResponse) String() string            { return proto.CompactTextString(m) }
func (*StopsResponse) ProtoMessage()               {}
func (*StopsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StopsResponse) GetStop() []*Stop {
	if m != nil {
		return m.Stop
	}
	return nil
}

type RouteStopTime struct {
	ScheduleTime string `protobuf:"bytes,1,opt,name=scheduleTime" json:"scheduleTime,omitempty"`
	ArrivalTime  string `protobuf:"bytes,2,opt,name=arrivalTime" json:"arrivalTime,omitempty"`
}

func (m *RouteStopTime) Reset()                    { *m = RouteStopTime{} }
func (m *RouteStopTime) String() string            { return proto.CompactTextString(m) }
func (*RouteStopTime) ProtoMessage()               {}
func (*RouteStopTime) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RouteStopTime) GetScheduleTime() string {
	if m != nil {
		return m.ScheduleTime
	}
	return ""
}

func (m *RouteStopTime) GetArrivalTime() string {
	if m != nil {
		return m.ArrivalTime
	}
	return ""
}

type RouteStop struct {
	StopId string         `protobuf:"bytes,1,opt,name=stopId" json:"stopId,omitempty"`
	Time   *RouteStopTime `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
}

func (m *RouteStop) Reset()                    { *m = RouteStop{} }
func (m *RouteStop) String() string            { return proto.CompactTextString(m) }
func (*RouteStop) ProtoMessage()               {}
func (*RouteStop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RouteStop) GetStopId() string {
	if m != nil {
		return m.StopId
	}
	return ""
}

func (m *RouteStop) GetTime() *RouteStopTime {
	if m != nil {
		return m.Time
	}
	return nil
}

type RouteStopRequest struct {
	RouteId string `protobuf:"bytes,1,opt,name=routeId" json:"routeId,omitempty"`
	StopId  string `protobuf:"bytes,2,opt,name=stopId" json:"stopId,omitempty"`
}

func (m *RouteStopRequest) Reset()                    { *m = RouteStopRequest{} }
func (m *RouteStopRequest) String() string            { return proto.CompactTextString(m) }
func (*RouteStopRequest) ProtoMessage()               {}
func (*RouteStopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RouteStopRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *RouteStopRequest) GetStopId() string {
	if m != nil {
		return m.StopId
	}
	return ""
}

type RouteStopsResponse struct {
	Stop []*RouteStop `protobuf:"bytes,1,rep,name=stop" json:"stop,omitempty"`
}

func (m *RouteStopsResponse) Reset()                    { *m = RouteStopsResponse{} }
func (m *RouteStopsResponse) String() string            { return proto.CompactTextString(m) }
func (*RouteStopsResponse) ProtoMessage()               {}
func (*RouteStopsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RouteStopsResponse) GetStop() []*RouteStop {
	if m != nil {
		return m.Stop
	}
	return nil
}

func init() {
	proto.RegisterType((*Stop)(nil), "pb.Stop")
	proto.RegisterType((*Geocode)(nil), "pb.Geocode")
	proto.RegisterType((*GeocodeRequest)(nil), "pb.GeocodeRequest")
	proto.RegisterType((*GeocodeResponse)(nil), "pb.GeocodeResponse")
	proto.RegisterType((*ListStopsRequest)(nil), "pb.ListStopsRequest")
	proto.RegisterType((*StopLocationRequest)(nil), "pb.StopLocationRequest")
	proto.RegisterType((*StopsResponse)(nil), "pb.StopsResponse")
	proto.RegisterType((*RouteStopTime)(nil), "pb.RouteStopTime")
	proto.RegisterType((*RouteStop)(nil), "pb.RouteStop")
	proto.RegisterType((*RouteStopRequest)(nil), "pb.RouteStopRequest")
	proto.RegisterType((*RouteStopsResponse)(nil), "pb.RouteStopsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ripta service

type RiptaClient interface {
	Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error)
	ListStops(ctx context.Context, in *ListStopsRequest, opts ...grpc.CallOption) (*StopsResponse, error)
	GetStopsByLocation(ctx context.Context, in *StopLocationRequest, opts ...grpc.CallOption) (*StopsResponse, error)
	RouteStopsByStopID(ctx context.Context, in *RouteStopRequest, opts ...grpc.CallOption) (*RouteStopsResponse, error)
}

type riptaClient struct {
	cc *grpc.ClientConn
}

func NewRiptaClient(cc *grpc.ClientConn) RiptaClient {
	return &riptaClient{cc}
}

func (c *riptaClient) Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*GeocodeResponse, error) {
	out := new(GeocodeResponse)
	err := grpc.Invoke(ctx, "/pb.Ripta/Geocode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riptaClient) ListStops(ctx context.Context, in *ListStopsRequest, opts ...grpc.CallOption) (*StopsResponse, error) {
	out := new(StopsResponse)
	err := grpc.Invoke(ctx, "/pb.Ripta/ListStops", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riptaClient) GetStopsByLocation(ctx context.Context, in *StopLocationRequest, opts ...grpc.CallOption) (*StopsResponse, error) {
	out := new(StopsResponse)
	err := grpc.Invoke(ctx, "/pb.Ripta/GetStopsByLocation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riptaClient) RouteStopsByStopID(ctx context.Context, in *RouteStopRequest, opts ...grpc.CallOption) (*RouteStopsResponse, error) {
	out := new(RouteStopsResponse)
	err := grpc.Invoke(ctx, "/pb.Ripta/RouteStopsByStopID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ripta service

type RiptaServer interface {
	Geocode(context.Context, *GeocodeRequest) (*GeocodeResponse, error)
	ListStops(context.Context, *ListStopsRequest) (*StopsResponse, error)
	GetStopsByLocation(context.Context, *StopLocationRequest) (*StopsResponse, error)
	RouteStopsByStopID(context.Context, *RouteStopRequest) (*RouteStopsResponse, error)
}

func RegisterRiptaServer(s *grpc.Server, srv RiptaServer) {
	s.RegisterService(&_Ripta_serviceDesc, srv)
}

func _Ripta_Geocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiptaServer).Geocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Ripta/Geocode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiptaServer).Geocode(ctx, req.(*GeocodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ripta_ListStops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiptaServer).ListStops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Ripta/ListStops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiptaServer).ListStops(ctx, req.(*ListStopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ripta_GetStopsByLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiptaServer).GetStopsByLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Ripta/GetStopsByLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiptaServer).GetStopsByLocation(ctx, req.(*StopLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ripta_RouteStopsByStopID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiptaServer).RouteStopsByStopID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Ripta/RouteStopsByStopID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiptaServer).RouteStopsByStopID(ctx, req.(*RouteStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ripta_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Ripta",
	HandlerType: (*RiptaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Geocode",
			Handler:    _Ripta_Geocode_Handler,
		},
		{
			MethodName: "ListStops",
			Handler:    _Ripta_ListStops_Handler,
		},
		{
			MethodName: "GetStopsByLocation",
			Handler:    _Ripta_GetStopsByLocation_Handler,
		},
		{
			MethodName: "RouteStopsByStopID",
			Handler:    _Ripta_RouteStopsByStopID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ripta.proto",
}

func init() { proto.RegisterFile("ripta.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x25, 0x69, 0xb6, 0xae, 0x37, 0x74, 0x74, 0x77, 0xd3, 0x88, 0xaa, 0x3d, 0x0c, 0x4b, 0xc0,
	0x5e, 0xe8, 0x43, 0x41, 0x20, 0xf1, 0x58, 0x55, 0x9a, 0x8a, 0xfa, 0x14, 0xe0, 0x07, 0xa4, 0x89,
	0x35, 0x22, 0x75, 0x75, 0x6a, 0x3b, 0x48, 0xfd, 0xf5, 0xa0, 0xeb, 0x8f, 0xd4, 0xa9, 0x78, 0xe0,
	0x29, 0xbe, 0xc7, 0xd7, 0xe7, 0x1c, 0x5f, 0x9f, 0x40, 0x2a, 0xeb, 0x46, 0x17, 0xb3, 0x46, 0x0a,
	0x2d, 0x30, 0x6e, 0x36, 0x6c, 0x0d, 0xc9, 0x77, 0x2d, 0x1a, 0xbc, 0x84, 0xb8, 0xae, 0xb2, 0xe8,
	0x3e, 0x7a, 0x18, 0xe5, 0x71, 0x5d, 0x21, 0x42, 0xb2, 0x2b, 0x9e, 0x79, 0x16, 0x1b, 0xc4, 0xac,
	0xf1, 0x1e, 0xd2, 0x8a, 0xab, 0x92, 0x28, 0x6a, 0xb1, 0xcb, 0x06, 0x66, 0x2b, 0x84, 0xd8, 0x0a,
	0x86, 0x8f, 0x5c, 0x94, 0xa2, 0xe2, 0x98, 0xc1, 0xb0, 0xa8, 0x2a, 0xc9, 0x95, 0x72, 0xac, 0xbe,
	0xc4, 0x09, 0x0c, 0xb6, 0x85, 0x36, 0xcc, 0x51, 0x4e, 0x4b, 0x12, 0xdb, 0x8a, 0xdd, 0x93, 0x61,
	0x8c, 0x72, 0xb3, 0x66, 0xef, 0xe0, 0xd2, 0x51, 0xe5, 0x7c, 0xdf, 0x72, 0xa5, 0xf1, 0x06, 0xce,
	0xf6, 0x2d, 0x97, 0x07, 0xc7, 0x67, 0x0b, 0xf6, 0x15, 0x5e, 0x75, 0x7d, 0xaa, 0x11, 0x3b, 0xc5,
	0xf1, 0x3d, 0x5c, 0x3c, 0x59, 0x88, 0xb4, 0x07, 0x0f, 0xe9, 0x3c, 0x9d, 0x35, 0x9b, 0x99, 0x6f,
	0xeb, 0x36, 0x19, 0xc2, 0x64, 0x5d, 0x2b, 0x4d, 0x03, 0x50, 0x4e, 0x85, 0x09, 0xb8, 0xa6, 0x7a,
	0x2d, 0xca, 0x82, 0xae, 0x14, 0x88, 0x4b, 0xd1, 0x6a, 0xee, 0xc5, 0x4d, 0xf1, 0x7f, 0x57, 0xc1,
	0x3b, 0x18, 0x55, 0xb5, 0xe4, 0xa5, 0x99, 0x5a, 0x62, 0xce, 0x1f, 0x01, 0xf6, 0x01, 0xc6, 0xce,
	0x80, 0xb3, 0x7f, 0x07, 0x89, 0xd2, 0xa2, 0x71, 0xd6, 0x2f, 0xc8, 0x3a, 0x35, 0xe4, 0x06, 0x65,
	0x3f, 0x61, 0x9c, 0x93, 0x36, 0x41, 0x3f, 0xea, 0x67, 0x8e, 0x0c, 0x5e, 0xaa, 0xf2, 0x17, 0xaf,
	0xda, 0x2d, 0xa7, 0xda, 0x19, 0xec, 0x61, 0xf4, 0x72, 0x85, 0x94, 0xf5, 0xef, 0x62, 0x6b, 0x5a,
	0xec, 0xa3, 0x86, 0x10, 0xfb, 0x06, 0xa3, 0x8e, 0x16, 0x6f, 0xe1, 0x9c, 0xb4, 0x56, 0x3e, 0x10,
	0xae, 0xc2, 0xb7, 0x90, 0x68, 0x7f, 0x3e, 0x9d, 0x5f, 0x91, 0xb3, 0x9e, 0x97, 0xdc, 0x6c, 0xb3,
	0x25, 0x4c, 0x3a, 0xd8, 0xcf, 0x2f, 0x83, 0xa1, 0x19, 0x59, 0xc7, 0xe9, 0xcb, 0x40, 0x2c, 0x0e,
	0xc5, 0xd8, 0x17, 0xc0, 0x8e, 0xe5, 0x38, 0x9c, 0x37, 0xbd, 0xe1, 0x8c, 0x7b, 0x16, 0xec, 0x84,
	0xe6, 0x7f, 0x22, 0x38, 0xcb, 0x29, 0xe6, 0xf8, 0xe9, 0x18, 0x47, 0x0c, 0x13, 0x60, 0x3d, 0x4d,
	0xaf, 0x7b, 0x98, 0x15, 0x60, 0x2f, 0xf0, 0x33, 0x8c, 0xba, 0x54, 0xe0, 0x0d, 0xf5, 0x9c, 0x86,
	0x64, 0x7a, 0xe5, 0x1f, 0x45, 0x05, 0xe7, 0x16, 0x80, 0x8f, 0xdc, 0xf6, 0x2d, 0x0e, 0x3e, 0x3f,
	0xf8, 0xda, 0xb7, 0x9e, 0x24, 0xea, 0xdf, 0x1c, 0xcb, 0xf0, 0xd2, 0x8b, 0x03, 0x7d, 0x56, 0x4b,
	0x6b, 0xe2, 0x74, 0xa4, 0xd3, 0xdb, 0x1e, 0x1a, 0xb0, 0x6c, 0xce, 0xcd, 0xff, 0xfd, 0xf1, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x10, 0xee, 0x17, 0xee, 0x03, 0x00, 0x00,
}
